#!/usr/bin/env ruby

require "dante"
require "gorthaur"
case
when ARGV.include?("server") then
  Dante::Runner.new("gorthaur_server").tap do |runner|
    runner.description = "Listen for any clients"

    log_path = File.join((ENV["GORTHAUR_LOG_PATH"] || Gorthaur::DEFAULT_LOG_PATH), "server.log")
    pid_path = File.join((ENV["GORTHAUR_PID_PATH"] || Gorthaur::DEFAULT_PID_PATH), "server.pid")

    runner.execute(:log_path => log_path, :pid_path => pid_path) do
      server = Gorthaur::Server.new
      Thread.new { server.call }
      DRb.start_service(Gorthaur::URI, server)
      DRb.thread.join
    end
  end

when ARGV.include?("client")
  Dante::Runner.new("gorthaur_client").tap do |runner|
    runner.description = "Uses the camera and reports to the server"

    runner.with_options do |opts|
      opts.on("-r", "--rate SECONDS", Integer, "Wait this long between shots") do |rate|
        options[:rate] = rate
      end

      opts.on("-p", "--path PATH", String, "Store shots in this path") do |path|
        options[:path] = path
      end
    end

    log_path = File.join((ENV["GORTHAUR_LOG_PATH"] || Gorthaur::DEFAULT_LOG_PATH), "client.log")
    pid_path = File.join((ENV["GORTHAUR_PID_PATH"] || Gorthaur::DEFAULT_PID_PATH), "client.pid")

    runner.execute(:log_path => log_path, :pid_path => pid_path) do |opts|
      rate = opts[:rate] || ENV["GORTHAUR_RATE"] || Gorthaur::DEFAULT_RATE
      directory = opts[:path] || ENV["GORTHAUR_PATH"] || Gorthaur::DEFAULT_PATH

      Gorthaur::Client.new(rate, FileUtils.mkdir_p(directory).first).call
    end
  end
else
  `gorthaur server -d && gorthaur client -d`
end
